#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
controller_1 = Controller(PRIMARY)
leftfront = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)
leftrear = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)
rightfront = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)
rightrear = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)
Roller = Motor(Ports.PORT6, GearSetting.RATIO_18_1, False)
Shooter_motor_a = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)
Shooter_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)
Shooter = MotorGroup(Shooter_motor_a, Shooter_motor_b)
Intake = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)


# wait for rotation sensor to fully initialize
wait(30, MSEC)
#endregion VEXcode Generated Robot Configuration
myVariable = 0

def ondriver_drivercontrol_0():
    global myVariable
    while True:
        leftfront.set_velocity(((controller_1.axis3.position() + (controller_1.axis4.position() + controller_1.axis1.position())) / 0.25), PERCENT)
        leftfront.spin(FORWARD)
        leftrear.set_velocity(((controller_1.axis3.position() - (controller_1.axis4.position() - controller_1.axis1.position())) / 0.25), PERCENT)
        leftrear.spin(FORWARD)
        rightfront.set_velocity(((controller_1.axis3.position() - (controller_1.axis4.position() + controller_1.axis1.position())) / 0.25), PERCENT)
        rightfront.spin(FORWARD)
        rightrear.set_velocity(((controller_1.axis3.position() + (controller_1.axis4.position() - controller_1.axis1.position())) / 0.25), PERCENT)
        rightrear.spin(FORWARD)
        wait(5, MSEC)

def onevent_controller_1buttonR1_pressed_0():
    global myVariable
    Roller.set_velocity(100, PERCENT)
    Roller.spin(FORWARD)

def onevent_controller_1buttonR1_released_0():
    global myVariable
    Roller.stop()

def onevent_controller_1buttonL1_pressed_0():
    global myVariable
    Roller.set_velocity(100, PERCENT)
    Roller.spin(REVERSE)

def onevent_controller_1buttonL1_released_0():
    global myVariable
    Roller.stop()

def onevent_controller_1buttonR2_pressed_0():
    global myVariable
    Intake.set_velocity(100, PERCENT)
    Intake.spin(FORWARD)

def onevent_controller_1buttonR2_released_0():
    global myVariable
    Intake.stop()

def onauton_autonomous_0():
    global myVariable
    leftfront.set_velocity(100, PERCENT)
    rightfront.set_velocity(100, PERCENT)
    Shooter.spin(FORWARD)
    leftrear.set_velocity(100, PERCENT)
    rightrear.set_velocity(100, PERCENT)
    Shooter.spin(REVERSE)
    wait(0.5, SECONDS)
    rightrear.stop()
    rightfront.stop()
    leftrear.stop()
    leftfront.stop()
    Roller.spin(REVERSE)
    wait(0.75, SECONDS)
    Roller.stop()

def onevent_controller_1buttonL2_pressed_0():
    global myVariable
    Intake.set_velocity(100, PERCENT)
    Intake.spin(REVERSE)

def onevent_controller_1buttonL2_released_0():
    global myVariable
    Intake.stop()

def onevent_controller_1buttonB_pressed_0():
    global myVariable
    Shooter.set_velocity(100, PERCENT)
    Shooter.spin(FORWARD)

def onevent_controller_1buttonB_released_0():
    global myVariable
    Shooter.stop()

# create a function for handling the starting and stopping of all autonomous tasks
def vexcode_auton_function():
    # Start the autonomous control tasks
    auton_task_0 = Thread( onauton_autonomous_0 )
    # wait for the driver control period to end
    while( competition.is_autonomous() and competition.is_enabled() ):
        # wait 10 milliseconds before checking again
        wait( 10, MSEC )
    # Stop the autonomous control tasks
    auton_task_0.stop()

def vexcode_driver_function():
    # Start the driver control tasks
    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )

    # wait for the driver control period to end
    while( competition.is_driver_control() and competition.is_enabled() ):
        # wait 10 milliseconds before checking again
        wait( 10, MSEC )
    # Stop the driver control tasks
    driver_control_task_0.stop()


# register the competition functions
competition = Competition( vexcode_driver_function, vexcode_auton_function )

# system event handlers
controller_1.buttonR1.pressed(onevent_controller_1buttonR1_pressed_0)
controller_1.buttonR1.released(onevent_controller_1buttonR1_released_0)
controller_1.buttonL1.pressed(onevent_controller_1buttonL1_pressed_0)
controller_1.buttonL1.released(onevent_controller_1buttonL1_released_0)
controller_1.buttonR2.pressed(onevent_controller_1buttonR2_pressed_0)
controller_1.buttonR2.released(onevent_controller_1buttonR2_released_0)
controller_1.buttonL2.pressed(onevent_controller_1buttonL2_pressed_0)
controller_1.buttonL2.released(onevent_controller_1buttonL2_released_0)
controller_1.buttonB.pressed(onevent_controller_1buttonB_pressed_0)
controller_1.buttonB.released(onevent_controller_1buttonB_released_0)
# add 15ms delay to make sure events are registered correctly.
wait(15, MSEC)
