from vex import *
import urandom




# Defining Ports/Hardware
controller_1 = Controller(PRIMARY)
leftfront = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)
leftrear = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)
rightfront = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)
rightrear = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)
motor_20 = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)
motor_5 = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)
brain=Brain()

wait(30, MSEC)

# Initializing brain to defaults
vexcode_brain_precision = 0
vexcode_console_precision = 0
vexcode_controller_1_precision = 0
myVariable = 0

# Begin the started sequence

# Controller Analog robot wheel movement

def when_started1():
    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision
    while True:
        leftfront.set_velocity((controller_1.axis3.position() + (controller_1.axis4.position() + controller_1.axis1.position())), PERCENT)
        leftfront.spin(FORWARD)
        leftrear.set_velocity((controller_1.axis3.position() - (controller_1.axis4.position() - controller_1.axis1.position())), PERCENT)
        leftrear.spin(FORWARD)
        rightfront.set_velocity((controller_1.axis3.position() - (controller_1.axis4.position() + controller_1.axis1.position())), PERCENT)
        rightfront.spin(FORWARD)
        rightrear.set_velocity((controller_1.axis3.position() + (controller_1.axis4.position() - controller_1.axis1.position())), PERCENT)
        rightrear.spin(FORWARD)
        wait(5, MSEC)

# Team Slogan/Robot name text on brain

def when_started2():
    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision
    brain.screen.set_cursor(1, 10)
    vexcode_brain_precision = 0
    controller_1.screen.print("Barry B Boxton Benson")
    brain.screen.print("Barry B Boxton Benson")

# Control for L1 to spin motor reverse on port 20 aka Horizontal Expansion

def onevent_controller_1buttonL1_pressed_0():
    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision
    while controller_1.buttonL1.pressing():
        motor_20.set_velocity(100, PERCENT)
        motor_20.set_max_torque(100, PERCENT)
        motor_20.spin(REVERSE)
        wait(5, MSEC)
    motor_20.stop()

# Control for R1 to spin motor on L1 on port 5 aka Wall Roller

def onevent_controller_1buttonR1_pressed_0():
    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision
    while controller_1.buttonR1.pressing():
        motor_5.set_velocity(50, PERCENT)
        motor_5.set_max_torque(100, PERCENT)
        motor_5.spin(REVERSE)
        wait(5, MSEC)
    motor_5.stop()

# Control for L1 to spin motor reverse on port 20 aka Horizontal Expansion

def onevent_controller_1buttonL2_pressed_0():
    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision
    while controller_1.buttonL2.pressing():
        motor_20.set_velocity(100, PERCENT)
        motor_20.set_max_torque(100, PERCENT)
        motor_20.spin(FORWARD)
        wait(5, MSEC)
    motor_20.stop()

# Control for R1 to spin motor reverse on L1 on port 5 aka Wall Roller

def onevent_controller_1buttonR2_pressed_0():
    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision
    while controller_1.buttonR2.pressing():
        motor_5.set_velocity(50, PERCENT)
        motor_5.set_max_torque(100, PERCENT)
        motor_5.spin(FORWARD)
        wait(5, MSEC)
    motor_5.stop()



# Autonomous Code

def onauton_autonomous_0():
    global myVariable, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision
    pass


# Competition defining functions

def vexcode_auton_function():
    auton_task_0 = Thread( onauton_autonomous_0 )
    while( competition.is_autonomous() and competition.is_enabled() ):
        wait( 10, MSEC )
    auton_task_0.stop()

def vexcode_driver_function():

    while( competition.is_driver_control() and competition.is_enabled() ):
        wait( 10, MSEC )




competition = Competition( vexcode_driver_function, vexcode_auton_function )

controller_1.buttonL1.pressed(onevent_controller_1buttonL1_pressed_0)
controller_1.buttonR1.pressed(onevent_controller_1buttonR1_pressed_0)
controller_1.buttonL2.pressed(onevent_controller_1buttonL2_pressed_0)
controller_1.buttonR2.pressed(onevent_controller_1buttonR2_pressed_0)
wait(15, MSEC)

ws2 = Thread( when_started2 )
when_started1()

